initSidebarItems({"constant":[["ACBG",""],["ACD",""],["ACI",""],["ACIC",""],["ACIE",""],["ACIS0",""],["ACIS1",""],["ACME",""],["ACO",""],["ADATE",""],["ADC0D",""],["ADC1D",""],["ADC2D",""],["ADC3D",""],["ADC4D",""],["ADC5D",""],["ADCH0",""],["ADCH1",""],["ADCH2",""],["ADCH3",""],["ADCH4",""],["ADCH5",""],["ADCH6",""],["ADCH7",""],["ADCL0",""],["ADCL1",""],["ADCL2",""],["ADCL3",""],["ADCL4",""],["ADCL5",""],["ADCL6",""],["ADCL7",""],["ADC_vect_num",""],["ADEN",""],["ADIE",""],["ADIF",""],["ADLAR",""],["ADPS0",""],["ADPS1",""],["ADPS2",""],["ADSC",""],["ADTS0",""],["ADTS1",""],["ADTS2",""],["AIN0D",""],["AIN1D",""],["ANALOG_COMP_vect_num",""],["AS2",""],["BLB01",""],["BLB02",""],["BLB0_MODE_1",""],["BLB0_MODE_2",""],["BLB0_MODE_3",""],["BLB0_MODE_4",""],["BLB11",""],["BLB12",""],["BLB1_MODE_1",""],["BLB1_MODE_2",""],["BLB1_MODE_3",""],["BLB1_MODE_4",""],["BLBSET",""],["BODS",""],["BODSE",""],["BORF",""],["BUFSIZ",""],["CAL0",""],["CAL1",""],["CAL2",""],["CAL3",""],["CAL4",""],["CAL5",""],["CAL6",""],["CAL7",""],["CLKPCE",""],["CLKPS0",""],["CLKPS1",""],["CLKPS2",""],["CLKPS3",""],["COM0A0",""],["COM0A1",""],["COM0B0",""],["COM0B1",""],["COM1A0",""],["COM1A1",""],["COM1B0",""],["COM1B1",""],["COM2A0",""],["COM2A1",""],["COM2B0",""],["COM2B1",""],["CPHA",""],["CPOL",""],["CS00",""],["CS01",""],["CS02",""],["CS10",""],["CS11",""],["CS12",""],["CS20",""],["CS21",""],["CS22",""],["DD0",""],["DD1",""],["DD2",""],["DD3",""],["DD4",""],["DD5",""],["DD6",""],["DD7",""],["DDB0",""],["DDB1",""],["DDB2",""],["DDB3",""],["DDB4",""],["DDB5",""],["DDB6",""],["DDB7",""],["DDC0",""],["DDC1",""],["DDC2",""],["DDC3",""],["DDC4",""],["DDC5",""],["DDC6",""],["DDD0",""],["DDD1",""],["DDD2",""],["DDD3",""],["DDD4",""],["DDD5",""],["DDD6",""],["DDD7",""],["DOR0",""],["DORD",""],["DST_END_WEEK",""],["DST_START_WEEK",""],["DTOSTR_ALWAYS_SIGN",""],["DTOSTR_PLUS_SIGN",""],["DTOSTR_UPPERCASE",""],["E2END",""],["E2PAGESIZE",""],["EDOM",""],["EEAR0",""],["EEAR1",""],["EEAR2",""],["EEAR3",""],["EEAR4",""],["EEAR5",""],["EEAR6",""],["EEAR7",""],["EEAR8",""],["EEAR9",""],["EEDR0",""],["EEDR1",""],["EEDR2",""],["EEDR3",""],["EEDR4",""],["EEDR5",""],["EEDR6",""],["EEDR7",""],["EEMPE",""],["EEPE",""],["EEPM0",""],["EEPM1",""],["EERE",""],["EERIE",""],["EE_READY_vect_num",""],["EFUSE_DEFAULT",""],["EOF",""],["ERANGE",""],["EXCLK",""],["EXIT_FAILURE",""],["EXIT_SUCCESS",""],["EXTRF",""],["FE0",""],["FLASHEND",""],["FOC0A",""],["FOC0B",""],["FOC1A",""],["FOC1B",""],["FOC2A",""],["FOC2B",""],["FUSE_MEMORY_SIZE",""],["GET_EXTENDED_FUSE_BITS",""],["GET_HIGH_FUSE_BITS",""],["GET_LOCK_BITS",""],["GET_LOW_FUSE_BITS",""],["GPIOR00",""],["GPIOR01",""],["GPIOR02",""],["GPIOR03",""],["GPIOR04",""],["GPIOR05",""],["GPIOR06",""],["GPIOR07",""],["GPIOR10",""],["GPIOR11",""],["GPIOR12",""],["GPIOR13",""],["GPIOR14",""],["GPIOR15",""],["GPIOR16",""],["GPIOR17",""],["GPIOR20",""],["GPIOR21",""],["GPIOR22",""],["GPIOR23",""],["GPIOR24",""],["GPIOR25",""],["GPIOR26",""],["GPIOR27",""],["ICES1",""],["ICF1",""],["ICIE1",""],["ICNC1",""],["ICR1H0",""],["ICR1H1",""],["ICR1H2",""],["ICR1H3",""],["ICR1H4",""],["ICR1H5",""],["ICR1H6",""],["ICR1H7",""],["ICR1L0",""],["ICR1L1",""],["ICR1L2",""],["ICR1L3",""],["ICR1L4",""],["ICR1L5",""],["ICR1L6",""],["ICR1L7",""],["INT0",""],["INT0_vect_num",""],["INT1",""],["INT16_MAX",""],["INT16_MIN",""],["INT1_vect_num",""],["INT32_MAX",""],["INT32_MIN",""],["INT64_MAX",""],["INT64_MIN",""],["INT8_MAX",""],["INT8_MIN",""],["INTF0",""],["INTF1",""],["INTMAX_MAX",""],["INTMAX_MIN",""],["INTPTR_MAX",""],["INTPTR_MIN",""],["INT_FAST16_MAX",""],["INT_FAST16_MIN",""],["INT_FAST32_MAX",""],["INT_FAST32_MIN",""],["INT_FAST64_MAX",""],["INT_FAST64_MIN",""],["INT_FAST8_MAX",""],["INT_FAST8_MIN",""],["INT_LEAST16_MAX",""],["INT_LEAST16_MIN",""],["INT_LEAST32_MAX",""],["INT_LEAST32_MIN",""],["INT_LEAST64_MAX",""],["INT_LEAST64_MIN",""],["INT_LEAST8_MAX",""],["INT_LEAST8_MIN",""],["ISC00",""],["ISC01",""],["ISC10",""],["ISC11",""],["IVCE",""],["IVSEL",""],["LB_MODE_1",""],["LB_MODE_2",""],["LB_MODE_3",""],["LC_ALL",""],["LC_COLLATE",""],["LC_CTYPE",""],["LC_MESSAGES",""],["LC_MONETARY",""],["LC_NUMERIC",""],["LC_TIME",""],["LOCKBITS_DEFAULT",""],["MB_LEN_MAX",""],["MPCM0",""],["MSTR",""],["MUX0",""],["MUX1",""],["MUX2",""],["MUX3",""],["M_1_PI",""],["M_2_PI",""],["M_2_SQRTPI",""],["M_E",""],["M_LN10",""],["M_LN2",""],["M_LOG10E",""],["M_LOG2E",""],["M_PI",""],["M_PI_2",""],["M_PI_4",""],["M_SQRT1_2",""],["M_SQRT2",""],["NTP_OFFSET",""],["OCF0A",""],["OCF0B",""],["OCF1A",""],["OCF1B",""],["OCF2A",""],["OCF2B",""],["OCIE0A",""],["OCIE0B",""],["OCIE1A",""],["OCIE1B",""],["OCIE2A",""],["OCIE2B",""],["OCR0A_0",""],["OCR0A_1",""],["OCR0A_2",""],["OCR0A_3",""],["OCR0A_4",""],["OCR0A_5",""],["OCR0A_6",""],["OCR0A_7",""],["OCR0B_0",""],["OCR0B_1",""],["OCR0B_2",""],["OCR0B_3",""],["OCR0B_4",""],["OCR0B_5",""],["OCR0B_6",""],["OCR0B_7",""],["OCR1AH0",""],["OCR1AH1",""],["OCR1AH2",""],["OCR1AH3",""],["OCR1AH4",""],["OCR1AH5",""],["OCR1AH6",""],["OCR1AH7",""],["OCR1AL0",""],["OCR1AL1",""],["OCR1AL2",""],["OCR1AL3",""],["OCR1AL4",""],["OCR1AL5",""],["OCR1AL6",""],["OCR1AL7",""],["OCR1BH0",""],["OCR1BH1",""],["OCR1BH2",""],["OCR1BH3",""],["OCR1BH4",""],["OCR1BH5",""],["OCR1BH6",""],["OCR1BH7",""],["OCR1BL0",""],["OCR1BL1",""],["OCR1BL2",""],["OCR1BL3",""],["OCR1BL4",""],["OCR1BL5",""],["OCR1BL6",""],["OCR1BL7",""],["OCR2AUB",""],["OCR2BUB",""],["OCR2_0",""],["OCR2_1",""],["OCR2_2",""],["OCR2_3",""],["OCR2_4",""],["OCR2_5",""],["OCR2_6",""],["OCR2_7",""],["ONE_DAY",""],["ONE_DEGREE",""],["ONE_HOUR",""],["PB0",""],["PB1",""],["PB2",""],["PB3",""],["PB4",""],["PB5",""],["PB6",""],["PB7",""],["PC0",""],["PC1",""],["PC2",""],["PC3",""],["PC4",""],["PC5",""],["PC6",""],["PCIE0",""],["PCIE1",""],["PCIE2",""],["PCIF0",""],["PCIF1",""],["PCIF2",""],["PCINT0",""],["PCINT0_vect_num",""],["PCINT1",""],["PCINT10",""],["PCINT11",""],["PCINT12",""],["PCINT13",""],["PCINT14",""],["PCINT16",""],["PCINT17",""],["PCINT18",""],["PCINT19",""],["PCINT1_vect_num",""],["PCINT2",""],["PCINT20",""],["PCINT21",""],["PCINT22",""],["PCINT23",""],["PCINT2_vect_num",""],["PCINT3",""],["PCINT4",""],["PCINT5",""],["PCINT6",""],["PCINT7",""],["PCINT8",""],["PCINT9",""],["PD0",""],["PD1",""],["PD2",""],["PD3",""],["PD4",""],["PD5",""],["PD6",""],["PD7",""],["PGERS",""],["PGWRT",""],["PIN0",""],["PIN1",""],["PIN2",""],["PIN3",""],["PIN4",""],["PIN5",""],["PIN6",""],["PIN7",""],["PINB0",""],["PINB1",""],["PINB2",""],["PINB3",""],["PINB4",""],["PINB5",""],["PINB6",""],["PINB7",""],["PINC0",""],["PINC1",""],["PINC2",""],["PINC3",""],["PINC4",""],["PINC5",""],["PINC6",""],["PIND0",""],["PIND1",""],["PIND2",""],["PIND3",""],["PIND4",""],["PIND5",""],["PIND6",""],["PIND7",""],["PORF",""],["PORT0",""],["PORT1",""],["PORT2",""],["PORT3",""],["PORT4",""],["PORT5",""],["PORT6",""],["PORT7",""],["PORTB0",""],["PORTB1",""],["PORTB2",""],["PORTB3",""],["PORTB4",""],["PORTB5",""],["PORTB6",""],["PORTB7",""],["PORTC0",""],["PORTC1",""],["PORTC2",""],["PORTC3",""],["PORTC4",""],["PORTC5",""],["PORTC6",""],["PORTD0",""],["PORTD1",""],["PORTD2",""],["PORTD3",""],["PORTD4",""],["PORTD5",""],["PORTD6",""],["PORTD7",""],["PRADC",""],["PRIX16",""],["PRIX32",""],["PRIX8",""],["PRIXFAST16",""],["PRIXFAST32",""],["PRIXFAST8",""],["PRIXLEAST16",""],["PRIXLEAST32",""],["PRIXLEAST8",""],["PRIXPTR",""],["PRId16",""],["PRId32",""],["PRId8",""],["PRIdFAST16",""],["PRIdFAST32",""],["PRIdFAST8",""],["PRIdLEAST16",""],["PRIdLEAST32",""],["PRIdLEAST8",""],["PRIdPTR",""],["PRIi16",""],["PRIi32",""],["PRIi8",""],["PRIiFAST16",""],["PRIiFAST32",""],["PRIiFAST8",""],["PRIiLEAST16",""],["PRIiLEAST32",""],["PRIiLEAST8",""],["PRIiPTR",""],["PRIo16",""],["PRIo32",""],["PRIo8",""],["PRIoFAST16",""],["PRIoFAST32",""],["PRIoFAST8",""],["PRIoLEAST16",""],["PRIoLEAST32",""],["PRIoLEAST8",""],["PRIoPTR",""],["PRIu16",""],["PRIu32",""],["PRIu8",""],["PRIuFAST16",""],["PRIuFAST32",""],["PRIuFAST8",""],["PRIuLEAST16",""],["PRIuLEAST32",""],["PRIuLEAST8",""],["PRIuPTR",""],["PRIx16",""],["PRIx32",""],["PRIx8",""],["PRIxFAST16",""],["PRIxFAST32",""],["PRIxFAST8",""],["PRIxLEAST16",""],["PRIxLEAST32",""],["PRIxLEAST8",""],["PRIxPTR",""],["PRSPI",""],["PRTIM0",""],["PRTIM1",""],["PRTIM2",""],["PRTWI",""],["PRUSART0",""],["PSRASY",""],["PSRSYNC",""],["PTRDIFF_MAX",""],["PTRDIFF_MIN",""],["PUD",""],["RAMEND",""],["RAMSTART",""],["RANDOM_MAX",""],["RAND_MAX",""],["REFS0",""],["REFS1",""],["RWWSB",""],["RWWSRE",""],["RXB80",""],["RXC0",""],["RXCIE0",""],["RXEN0",""],["SCNd16",""],["SCNd32",""],["SCNd8",""],["SCNdFAST16",""],["SCNdFAST32",""],["SCNdFAST8",""],["SCNdLEAST16",""],["SCNdLEAST32",""],["SCNdLEAST8",""],["SCNdPTR",""],["SCNi16",""],["SCNi32",""],["SCNi8",""],["SCNiFAST16",""],["SCNiFAST32",""],["SCNiFAST8",""],["SCNiLEAST16",""],["SCNiLEAST32",""],["SCNiLEAST8",""],["SCNiPTR",""],["SCNo16",""],["SCNo32",""],["SCNo8",""],["SCNoFAST16",""],["SCNoFAST32",""],["SCNoFAST8",""],["SCNoLEAST16",""],["SCNoLEAST32",""],["SCNoLEAST8",""],["SCNoPTR",""],["SCNu16",""],["SCNu32",""],["SCNu8",""],["SCNuFAST16",""],["SCNuFAST32",""],["SCNuFAST8",""],["SCNuLEAST16",""],["SCNuLEAST32",""],["SCNuLEAST8",""],["SCNuPTR",""],["SCNx16",""],["SCNx32",""],["SCNx8",""],["SCNxFAST16",""],["SCNxFAST32",""],["SCNxFAST8",""],["SCNxLEAST16",""],["SCNxLEAST32",""],["SCNxLEAST8",""],["SCNxPTR",""],["SE",""],["SEEK_CUR",""],["SEEK_END",""],["SEEK_SET",""],["SELFPRGEN",""],["SIGNATURE_0",""],["SIGNATURE_1",""],["SIGNATURE_2",""],["SIGRD",""],["SIG_ATOMIC_MAX",""],["SIG_ATOMIC_MIN",""],["SLEEP_MODE_ADC",""],["SLEEP_MODE_EXT_STANDBY",""],["SLEEP_MODE_IDLE",""],["SLEEP_MODE_PWR_DOWN",""],["SLEEP_MODE_PWR_SAVE",""],["SLEEP_MODE_STANDBY",""],["SM0",""],["SM1",""],["SM2",""],["SPDR0",""],["SPDR1",""],["SPDR2",""],["SPDR3",""],["SPDR4",""],["SPDR5",""],["SPDR6",""],["SPDR7",""],["SPE",""],["SPI2X",""],["SPIE",""],["SPIF",""],["SPI_STC_vect_num",""],["SPMEN",""],["SPMIE",""],["SPM_PAGESIZE",""],["SPM_READY_vect_num",""],["SPR0",""],["SPR1",""],["SREG_C",""],["SREG_H",""],["SREG_I",""],["SREG_N",""],["SREG_S",""],["SREG_T",""],["SREG_V",""],["SREG_Z",""],["TCN2UB",""],["TCNT0_0",""],["TCNT0_1",""],["TCNT0_2",""],["TCNT0_3",""],["TCNT0_4",""],["TCNT0_5",""],["TCNT0_6",""],["TCNT0_7",""],["TCNT1H0",""],["TCNT1H1",""],["TCNT1H2",""],["TCNT1H3",""],["TCNT1H4",""],["TCNT1H5",""],["TCNT1H6",""],["TCNT1H7",""],["TCNT1L0",""],["TCNT1L1",""],["TCNT1L2",""],["TCNT1L3",""],["TCNT1L4",""],["TCNT1L5",""],["TCNT1L6",""],["TCNT1L7",""],["TCNT2_0",""],["TCNT2_1",""],["TCNT2_2",""],["TCNT2_3",""],["TCNT2_4",""],["TCNT2_5",""],["TCNT2_6",""],["TCNT2_7",""],["TCR2AUB",""],["TCR2BUB",""],["TIMER0_COMPA_vect_num",""],["TIMER0_COMPB_vect_num",""],["TIMER0_OVF_vect_num",""],["TIMER1_CAPT_vect_num",""],["TIMER1_COMPA_vect_num",""],["TIMER1_COMPB_vect_num",""],["TIMER1_OVF_vect_num",""],["TIMER2_COMPA_vect_num",""],["TIMER2_COMPB_vect_num",""],["TIMER2_OVF_vect_num",""],["TOIE0",""],["TOIE1",""],["TOIE2",""],["TOV0",""],["TOV1",""],["TOV2",""],["TSM",""],["TWA0",""],["TWA1",""],["TWA2",""],["TWA3",""],["TWA4",""],["TWA5",""],["TWA6",""],["TWAM0",""],["TWAM1",""],["TWAM2",""],["TWAM3",""],["TWAM4",""],["TWAM5",""],["TWAM6",""],["TWBR0",""],["TWBR1",""],["TWBR2",""],["TWBR3",""],["TWBR4",""],["TWBR5",""],["TWBR6",""],["TWBR7",""],["TWD0",""],["TWD1",""],["TWD2",""],["TWD3",""],["TWD4",""],["TWD5",""],["TWD6",""],["TWD7",""],["TWEA",""],["TWEN",""],["TWGCE",""],["TWIE",""],["TWINT",""],["TWI_vect_num",""],["TWPS0",""],["TWPS1",""],["TWS3",""],["TWS4",""],["TWS5",""],["TWS6",""],["TWS7",""],["TWSTA",""],["TWSTO",""],["TWWC",""],["TW_BUS_ERROR",""],["TW_MR_ARB_LOST",""],["TW_MR_DATA_ACK",""],["TW_MR_DATA_NACK",""],["TW_MR_SLA_ACK",""],["TW_MR_SLA_NACK",""],["TW_MT_ARB_LOST",""],["TW_MT_DATA_ACK",""],["TW_MT_DATA_NACK",""],["TW_MT_SLA_ACK",""],["TW_MT_SLA_NACK",""],["TW_NO_INFO",""],["TW_READ",""],["TW_REP_START",""],["TW_SR_ARB_LOST_GCALL_ACK",""],["TW_SR_ARB_LOST_SLA_ACK",""],["TW_SR_DATA_ACK",""],["TW_SR_DATA_NACK",""],["TW_SR_GCALL_ACK",""],["TW_SR_GCALL_DATA_ACK",""],["TW_SR_GCALL_DATA_NACK",""],["TW_SR_SLA_ACK",""],["TW_SR_STOP",""],["TW_START",""],["TW_ST_ARB_LOST_SLA_ACK",""],["TW_ST_DATA_ACK",""],["TW_ST_DATA_NACK",""],["TW_ST_LAST_DATA",""],["TW_ST_SLA_ACK",""],["TW_WRITE",""],["TXB80",""],["TXC0",""],["TXCIE0",""],["TXEN0",""],["U2X0",""],["UBRR0_0",""],["UBRR0_1",""],["UBRR0_10",""],["UBRR0_11",""],["UBRR0_2",""],["UBRR0_3",""],["UBRR0_4",""],["UBRR0_5",""],["UBRR0_6",""],["UBRR0_7",""],["UBRR0_8",""],["UBRR0_9",""],["UCPHA0",""],["UCPOL0",""],["UCSZ00",""],["UCSZ01",""],["UCSZ02",""],["UDORD0",""],["UDR0_0",""],["UDR0_1",""],["UDR0_2",""],["UDR0_3",""],["UDR0_4",""],["UDR0_5",""],["UDR0_6",""],["UDR0_7",""],["UDRE0",""],["UDRIE0",""],["UINT8_MAX",""],["UINT_FAST8_MAX",""],["UINT_LEAST8_MAX",""],["UMSEL00",""],["UMSEL01",""],["UNIX_OFFSET",""],["UPE0",""],["UPM00",""],["UPM01",""],["USART_RX_vect_num",""],["USART_TX_vect_num",""],["USART_UDRE_vect_num",""],["USBS0",""],["WCOL",""],["WDCE",""],["WDE",""],["WDIE",""],["WDIF",""],["WDP0",""],["WDP1",""],["WDP2",""],["WDP3",""],["WDRF",""],["WDT_vect_num",""],["WGM00",""],["WGM01",""],["WGM02",""],["WGM10",""],["WGM11",""],["WGM12",""],["WGM13",""],["WGM20",""],["WGM21",""],["WGM22",""],["XRAMEND",""],["XRAMSIZE",""],["_ALLOCA_H",""],["_AVR_BOOT_H_",""],["_AVR_CPUFUNC_H_",""],["_AVR_EEPROM_H_",""],["_AVR_FUSE_H_",""],["_AVR_IOM328P_H_",""],["_AVR_IOXXX_H_",""],["_AVR_LOCK_H_",""],["_AVR_PORTPINS_H_",""],["_AVR_POWER_H_",""],["_AVR_SFR_DEFS_H_",""],["_AVR_SIGNATURE_H_",""],["_AVR_SLEEP_H_",""],["_FDEV_EOF",""],["_FDEV_ERR",""],["_FDEV_SETUP_READ",""],["_FDEV_SETUP_RW",""],["_FDEV_SETUP_WRITE",""],["_HAVE_AVR_STACK_POINTER_HI",""],["_IONBF",""],["_JBLEN",""],["_MONTHS__APRIL",""],["_MONTHS__AUGUST",""],["_MONTHS__DECEMBER",""],["_MONTHS__FEBRUARY",""],["_MONTHS__JANUARY",""],["_MONTHS__JULY",""],["_MONTHS__JUNE",""],["_MONTHS__MARCH",""],["_MONTHS__MAY",""],["_MONTHS__NOVEMBER",""],["_MONTHS__OCTOBER",""],["_MONTHS__SEPTEMBER",""],["_SFR_ASM_COMPAT",""],["_STDIO_H_",""],["_STDLIB_H_",""],["_STRING_H_",""],["_SYS_TYPES_H_",""],["_UTIL_ATOMIC_H_",""],["_UTIL_TWI_H_",""],["_VECTORS_SIZE",""],["_WEEK_DAYS__FRIDAY",""],["_WEEK_DAYS__MONDAY",""],["_WEEK_DAYS__SATURDAY",""],["_WEEK_DAYS__SUNDAY",""],["_WEEK_DAYS__THURSDAY",""],["_WEEK_DAYS__TUESDAY",""],["_WEEK_DAYS__WEDNESDAY",""],["__AVR_HAVE_PRR",""],["__AVR_LIBC_DATE_",""],["__AVR_LIBC_DATE_STRING__",""],["__AVR_LIBC_MAJOR__",""],["__AVR_LIBC_MINOR__",""],["__AVR_LIBC_REVISION__",""],["__AVR_LIBC_VERSION_STRING__",""],["__AVR_LIBC_VERSION__",""],["__COMMON_ASB",""],["__COMMON_ASRE",""],["__CTYPE_H_",""],["__ERRNO_H_",""],["__GNUC_VA_LIST",""],["__HAS_DELAY_CYCLES",""],["__PGMSPACE_H_",""],["__SEOF",""],["__SERR",""],["__SETJMP_H_",""],["__SFR_OFFSET",""],["__SMALLOC",""],["__SPGM",""],["__SPM_ENABLE",""],["__SRD",""],["__SSTR",""],["__SUNGET",""],["__SWR",""],["__USING_MINT8",""],["clock_div_t_clock_div_1",""],["clock_div_t_clock_div_128",""],["clock_div_t_clock_div_16",""],["clock_div_t_clock_div_2",""],["clock_div_t_clock_div_256",""],["clock_div_t_clock_div_32",""],["clock_div_t_clock_div_4",""],["clock_div_t_clock_div_64",""],["clock_div_t_clock_div_8",""]],"fn":[["__assert",""],["__builtin_avr_cli","\\ingroup avr_builtins"],["__builtin_avr_delay_cycles","\\ingroup avr_builtins"],["__builtin_avr_fmul","\\ingroup avr_builtins"],["__builtin_avr_fmuls","\\ingroup avr_builtins"],["__builtin_avr_fmulsu","\\ingroup avr_builtins"],["__builtin_avr_sei","\\ingroup avr_builtins"],["__builtin_avr_sleep","\\ingroup avr_builtins"],["__builtin_avr_swap","\\ingroup avr_builtins"],["__builtin_avr_wdr","\\ingroup avr_builtins"],["__strlen_P",""],["abort","The abort() function causes abnormal program termination to occur. This realization disables interrupts and jumps to _exit() function with argument equal to 1. In the limited AVR environment, execution is effectively halted by entering an infinite loop."],["abs","The abs() function computes the absolute value of the integer \\c i. \\note The abs() and labs() functions are builtins of gcc."],["acos","The acos() function computes the principal value of the arc cosine of \\a __x.  The returned value is in the range [0, pi] radians. A domain error occurs for arguments not in the range [-1, +1]."],["alloca","\\ingroup alloca \\brief Allocate \\a __size bytes of space in the stack frame of the caller."],["asctime","The asctime function converts the broken-down time of timeptr, into an ascii string in the form"],["asctime_r","Re entrant version of asctime()."],["asin","The asin() function computes the principal value of the arc sine of \\a __x.  The returned value is in the range [-pi/2, pi/2] radians. A domain error occurs for arguments not in the range [-1, +1]."],["atan","The atan() function computes the principal value of the arc tangent of \\a __x.  The returned value is in the range [-pi/2, pi/2] radians."],["atan2","The atan2() function computes the principal value of the arc tangent of __y / __x, using the signs of both arguments to determine the quadrant of the return value.  The returned value is in the range [-pi, +pi] radians."],["atexit",""],["atof","\\ingroup avr_stdlib \\fn  double atof (const char *nptr)"],["atoi","The atoi() function converts the initial portion of the string pointed to by \\p s to integer representation. In contrast to"],["atol","The atol() function converts the initial portion of the string pointed to by \\p s to long integer representation. In contrast to"],["bsearch","The bsearch() function searches an array of \\c nmemb objects, the initial member of which is pointed to by \\c base, for a member that matches the object pointed to by \\c key.  The size of each member of the array is specified by \\c size."],["calloc","Allocate \\c nele elements of \\c size each.  Identical to calling \\c malloc() using nele * size as argument, except the allocated memory will be cleared to zero."],["cbrt","The cbrt() function returns the cube root of \\a __x."],["ccp_write_io","\\ingroup avr_cpufunc"],["ceil","The ceil() function returns the smallest integral value greater than or equal to \\a __x, expressed as a floating-point number."],["clearerr","Clear the error and end-of-file flags of \\c stream."],["clock",""],["cos","The cos() function returns the cosine of \\a __x, measured in radians."],["cosh","The cosh() function returns the hyperbolic cosine of \\a __x."],["ctime","The ctime function is equivalent to asctime(localtime(timer))"],["ctime_r","Re entrant version of ctime()."],["daylight_seconds","Computes the amount of time the sun is above the horizon, at the location of the observer."],["difftime","The difftime function returns the difference between two binary time stamps, time1 - time0."],["div","The div() function computes the value \\c num/denom and returns the quotient and remainder in a structure named \\c div_t that contains two int members named \\c quot and \\c rem."],["dtostre","\\ingroup avr_stdlib The dtostre() function converts the double value passed in \\c val into an ASCII representation that will be stored under \\c s.  The caller is responsible for providing sufficient storage in \\c s."],["dtostrf","\\ingroup avr_stdlib The dtostrf() function converts the double value passed in \\c val into an ASCII representationthat will be stored under \\c s.  The caller is responsible for providing sufficient storage in \\c s."],["eeprom_read_block","\\ingroup avr_eeprom Read a block of \\a __n bytes from EEPROM address \\a __src to SRAM \\a __dst."],["eeprom_read_byte","\\ingroup avr_eeprom Read one byte from EEPROM address \\a __p."],["eeprom_read_dword","\\ingroup avr_eeprom Read one 32-bit double word (little endian) from EEPROM address \\a __p."],["eeprom_read_float","\\ingroup avr_eeprom Read one float value (little endian) from EEPROM address \\a __p."],["eeprom_read_word","\\ingroup avr_eeprom Read one 16-bit word (little endian) from EEPROM address \\a __p."],["eeprom_update_block","\\ingroup avr_eeprom Update a block of \\a __n bytes to EEPROM address \\a __dst from \\a __src. \\note The argument order is mismatch with common functions like strcpy()."],["eeprom_update_byte","\\ingroup avr_eeprom Update a byte \\a __value to EEPROM address \\a __p."],["eeprom_update_dword","\\ingroup avr_eeprom Update a 32-bit double word \\a __value to EEPROM address \\a __p."],["eeprom_update_float","\\ingroup avr_eeprom Update a float \\a __value to EEPROM address \\a __p."],["eeprom_update_word","\\ingroup avr_eeprom Update a word \\a __value to EEPROM address \\a __p."],["eeprom_write_block","\\ingroup avr_eeprom Write a block of \\a __n bytes to EEPROM address \\a __dst from \\a __src. \\note The argument order is mismatch with common functions like strcpy()."],["eeprom_write_byte","\\ingroup avr_eeprom Write a byte \\a __value to EEPROM address \\a __p."],["eeprom_write_dword","\\ingroup avr_eeprom Write a 32-bit double word \\a __value to EEPROM address \\a __p."],["eeprom_write_float","\\ingroup avr_eeprom Write a float \\a __value to EEPROM address \\a __p."],["eeprom_write_word","\\ingroup avr_eeprom Write a word \\a __value to EEPROM address \\a __p."],["equation_of_time","Computes the difference between apparent solar time and mean solar time. The returned value is in seconds."],["eu_dst",""],["exit","The exit() function terminates the application.  Since there is no environment to return to, \\c status is ignored, and code execution will eventually reach an infinite loop, thereby effectively halting all code processing.  Before entering the infinite loop, interrupts are globally disabled."],["exp","The exp() function returns the exponential value of \\a __x."],["fabs","The fabs() function computes the absolute value of a floating-point number \\a __x."],["fatfs_time","Convert a Y2K time stamp into a FAT file system time stamp."],["fclose","This function closes \\c stream, and disallows and further IO to and from it."],["fdevopen",""],["fdim","The fdim() function returns max(__x - __y, 0). If \\a __x or \\a __y or both are NaN, NaN is returned."],["fdopen",""],["feof","Test the end-of-file flag of \\c stream.  This flag can only be cleared by a call to clearerr()."],["ferror","Test the error flag of \\c stream.  This flag can only be cleared by a call to clearerr()."],["ffs","\\ingroup avr_string \\fn int ffs(int val);"],["ffsl","\\ingroup avr_string \\fn int ffsl(long val);"],["ffsll","\\ingroup avr_string \\fn int ffsll(long long val);"],["fgetc","The function \\c fgetc reads a character from \\c stream.  It returns the character, or \\c EOF in case end-of-file was encountered or an error occurred.  The routines feof() or ferror() must be used to distinguish between both situations."],["fgetpos",""],["fgets","Read at most size - 1 bytes from \\c stream, until a newline character was encountered, and store the characters in the buffer pointed to by \\c str.  Unless an error was encountered while reading, the string will then be terminated with a \\c NUL character."],["fileno",""],["floor","The floor() function returns the largest integral value less than or equal to \\a __x, expressed as a floating-point number."],["fma","The fma() function performs floating-point multiply-add. This is the operation (__x * __y) + __z, but the intermediate result is not rounded to the destination type.  This can sometimes improve the precision of a calculation."],["fmax","The fmax() function returns the greater of the two values \\a __x and \\a __y. If an argument is NaN, the other argument is returned. If both arguments are NaN, NaN is returned."],["fmin","The fmin() function returns the lesser of the two values \\a __x and \\a __y. If an argument is NaN, the other argument is returned. If both arguments are NaN, NaN is returned."],["fmod","The function fmod() returns the floating-point remainder of __x / __y."],["fopen",""],["fprintf","The function \\c fprintf performs formatted output to \\c stream. See \\c vfprintf() for details."],["fprintf_P","Variant of \\c fprintf() that uses a \\c fmt string that resides in program memory."],["fputc","The function \\c fputc sends the character \\c c (though given as type \\c int) to \\c stream.  It returns the character, or \\c EOF in case an error occurred."],["fputs","Write the string pointed to by \\c str to stream \\c stream."],["fputs_P","Variant of fputs() where \\c str resides in program memory."],["fread","Read \\c nmemb objects, \\c size bytes each, from \\c stream, to the buffer pointed to by \\c ptr."],["free","The free() function causes the allocated memory referenced by \\c ptr to be made available for future allocations.  If \\c ptr is NULL, no action occurs."],["freopen",""],["frexp","The frexp() function breaks a floating-point number into a normalized fraction and an integral power of 2.  It stores the integer in the \\c int object pointed to by \\a __pexp."],["fscanf","The function \\c fscanf performs formatted input, reading the input data from \\c stream."],["fscanf_P","Variant of fscanf() using a \\c fmt string in program memory."],["fseek",""],["fsetpos",""],["ftell",""],["fwrite","Write \\c nmemb objects, \\c size bytes each, to \\c stream. The first byte of the first object is referenced by \\c ptr."],["getc",""],["getchar",""],["getenv",""],["gets","Similar to fgets() except that it will operate on stream \\c stdin, and the trailing newline (if any) will not be stored in the string. It is the caller's responsibility to provide enough storage to hold the characters read."],["gm_sidereal","Returns Greenwich Mean Sidereal Time, as seconds into the sidereal day. The returned value will range from 0 through 86399 seconds."],["gmtime","The gmtime function converts the time stamp pointed to by timer into broken-down time, expressed as UTC."],["gmtime_r","Re entrant version of gmtime()."],["hypot","The hypot() function returns sqrt(__x*__x + __y*__y). This is the length of the hypotenuse of a right triangle with sides of length \\a __x and \\a __y, or the  distance of the point (\\a __x, \\a __y) from the origin. Using this function  instead of the direct formula is wise, since the error is much smaller. No underflow with small \\a __x and \\a __y. No overflow if result is in range."],["is_leap_year","Return 1 if year is a leap year, zero if it is not."],["isalnum","\\ingroup ctype"],["isalpha","\\ingroup ctype"],["isascii","\\ingroup ctype"],["isblank","\\ingroup ctype"],["iscntrl","\\ingroup ctype"],["isdigit","\\ingroup ctype"],["isgraph","\\ingroup ctype"],["isinf","The function isinf() returns 1 if the argument \\a __x is positive infinity, -1 if \\a __x is negative infinity, and 0 otherwise."],["islower","\\ingroup ctype"],["isnan","The function isnan() returns 1 if the argument \\a __x represents a \"not-a-number\" (NaN) object, otherwise 0."],["iso_week_date","Return a week_date structure with the ISO_8601 week based date corresponding to the given year and day of year. See http://en.wikipedia.org/wiki/ISO_week_date for more information."],["iso_week_date_r","Re-entrant version of iso-week_date."],["isotime","The isotime function constructs an ascii string in the form \\code2013-03-23 01:03:52\\endcode"],["isotime_r","Re entrant version of isotime()"],["isprint","\\ingroup ctype"],["ispunct","\\ingroup ctype"],["isspace","\\ingroup ctype"],["isupper","\\ingroup ctype"],["isxdigit","\\ingroup ctype"],["labs","The labs() function computes the absolute value of the long integer \\c i. \\note The abs() and labs() functions are builtins of gcc."],["ldexp","The ldexp() function multiplies a floating-point number by an integral power of 2. It returns the value of \\a __x times 2 raised to the power \\a __exp."],["ldiv","The ldiv() function computes the value \\c num/denom and returns the quotient and remainder in a structure named \\c ldiv_t that contains two long integer members named \\c quot and \\c rem."],["lm_sidereal","Returns Local Mean Sidereal Time, as seconds into the sidereal day. The returned value will range from 0 through 86399 seconds."],["localeconv",""],["localtime","The localtime function converts the time stamp pointed to by timer into broken-down time, expressed as Local time."],["localtime_r","Re entrant version of localtime()."],["log","The log() function returns the natural logarithm of argument \\a __x."],["log10","The log10() function returns the logarithm of argument \\a __x to base 10."],["longjmp","\\ingroup setjmp \\brief Non-local jump to a saved stack context."],["lrint","The lrint() function rounds \\a __x to the nearest integer, rounding the halfway cases to the even integer direction. (That is both 1.5 and 2.5 values are rounded to 2). This function is similar to rint() function, but it differs in type of return value and in that an overflow is possible."],["lround","The lround() function rounds \\a __x to the nearest integer, but rounds halfway cases away from zero (instead of to the nearest even integer). This function is similar to round() function, but it differs in type of return value and in that an overflow is possible."],["lseek",""],["malloc","The malloc() function allocates \\c size bytes of memory. If malloc() fails, a NULL pointer is returned."],["memccpy","\\ingroup avr_string \\fn void *memccpy(void *dest, const void *src, int val, size_t len) \\brief Copy memory area."],["memccpy_P","\\ingroup avr_pgmspace \\fn void *memccpy_P (void *dest, const void *src, int val, size_t len)"],["memchr","\\ingroup avr_string \\fn void *memchr(const void *src, int val, size_t len) \\brief Scan memory for a character."],["memchr_P","\\ingroup avr_pgmspace \\fn const void * memchr_P(const void *s, int val, size_t len) \\brief Scan flash memory for a character."],["memcmp","\\ingroup avr_string \\fn int memcmp(const void *s1, const void *s2, size_t len) \\brief Compare memory areas"],["memcmp_P","\\ingroup avr_pgmspace \\fn int memcmp_P(const void *s1, const void *s2, size_t len) \\brief Compare memory areas"],["memcmp_PF","\\ingroup avr_pgmspace \\fn int memcmp_PF(const void *s1, uint_farptr_t s2, size_t len) \\brief Compare memory areas"],["memcpy","\\ingroup avr_string \\fn void *memcpy(void *dest, const void *src, size_t len) \\brief Copy a memory area."],["memcpy_P","\\ingroup avr_pgmspace \\fn void *memcpy_P(void *dest, const void *src, size_t n)"],["memcpy_PF","\\ingroup avr_pgmspace \\fn void *memcpy_PF(void *dest, uint_farptr_t src, size_t n) \\brief Copy a memory block from flash to SRAM"],["memmem","\\ingroup avr_string \\fn void *memmem(const void *s1, size_t len1, const void *s2, size_t len2)"],["memmem_P","\\ingroup avr_pgmspace \\fn void *memmem_P(const void *s1, size_t len1, const void *s2, size_t len2)"],["memmove","\\ingroup avr_string \\fn void *memmove(void *dest, const void *src, size_t len) \\brief Copy memory area."],["memrchr","\\ingroup avr_string \\fn void *memrchr(const void *src, int val, size_t len)"],["memrchr_P","\\ingroup avr_pgmspace \\fn const void +memrchr_P(const void *src, int val, size_t len)"],["memset","\\ingroup avr_string \\fn void *memset(void *dest, int val, size_t len) \\brief Fill memory with a constant byte."],["mk_gmtime","This function 'compiles' the elements of a broken-down time structure, returning a binary time stamp. The elements of timeptr are interpreted as representing UTC."],["mktime","This function 'compiles' the elements of a broken-down time structure, returning a binary time stamp. The elements of timeptr are interpreted as representing Local Time."],["modf","The modf() function breaks the argument \\a __x into integral and fractional parts, each of which has the same sign as the argument. It stores the integral part as a double in the object pointed to by \\a __iptr."],["modff","An alias for modf()."],["month_length","Return the length of month, given the year and month, where month is in the range 1 to 12."],["moon_phase","Returns an approximation to the phase of the moon. The sign of the returned value indicates a waning or waxing phase. The magnitude of the returned value indicates the percentage illumination."],["perror",""],["pow","The function pow() returns the value of \\a __x to the exponent \\a __y."],["printf","The function \\c printf performs formatted output to stream \\c stdout.  See \\c vfprintf() for details."],["printf_P","Variant of \\c printf() that uses a \\c fmt string that resides in program memory."],["putc",""],["putchar",""],["puts","Write the string pointed to by \\c str, and a trailing newline character, to \\c stdout."],["puts_P","Variant of puts() where \\c str resides in program memory."],["qsort","The qsort() function is a modified partition-exchange sort, or quicksort."],["raise",""],["rand","The rand() function computes a sequence of pseudo-random integers in the range of 0 to \\c RAND_MAX (as defined by the header file <stdlib.h>)."],["rand_r","Variant of rand() that stores the context in the user-supplied variable located at \\c ctx instead of a static library variable so the function becomes re-entrant."],["random","\\ingroup avr_stdlib The random() function computes a sequence of pseudo-random integers in the range of 0 to \\c RANDOM_MAX (as defined by the header file <stdlib.h>)."],["random_r","\\ingroup avr_stdlib Variant of random() that stores the context in the user-supplied variable located at \\c ctx instead of a static library variable so the function becomes re-entrant."],["read",""],["realloc","The realloc() function tries to change the size of the region allocated at \\c ptr to the new \\c size value.  It returns a pointer to the new region.  The returned pointer might be the same as the old pointer, or a pointer to a completely different region."],["remove",""],["rename",""],["rewind",""],["round","The round() function rounds \\a __x to the nearest integer, but rounds halfway cases away from zero (instead of to the nearest even integer). Overflow is impossible."],["scanf","The function \\c scanf performs formatted input from stream \\c stdin."],["scanf_P","Variant of scanf() where \\c fmt resides in program memory."],["set_dst","Specify the Daylight Saving function."],["set_position","Set the geographic coordinates of the 'observer', for use with several of the following functions. Parameters are passed as seconds of North Latitude, and seconds of East Longitude."],["set_system_time","Initialize the system time. Examples are..."],["set_zone","Set the 'time zone'. The parameter is given in seconds East of the Prime Meridian. Example for New York City: \\code set_zone(-5 * ONE_HOUR);\\endcode"],["setbuf",""],["setjmp","\\ingroup setjmp \\brief Save stack context for non-local goto."],["setlocale",""],["setvbuf",""],["signal",""],["signbit","The signbit() function returns a nonzero value if the value of \\a __x has its sign bit set.  This is not the same as `\\a __x < 0.0', because IEEE 754 floating point allows zero to be signed. The comparison `-0.0 < 0.0' is false, but `signbit (-0.0)' will return a nonzero value."],["sin","The sin() function returns the sine of \\a __x, measured in radians."],["sinh","The sinh() function returns the hyperbolic sine of \\a __x."],["snprintf","Like \\c sprintf(), but instead of assuming \\c s to be of infinite size, no more than \\c n characters (including the trailing NUL character) will be converted to \\c s."],["snprintf_P","Variant of \\c snprintf() that uses a \\c fmt string that resides in program memory."],["solar_declination","Returns the declination of the sun in radians."],["solar_noon","Computes the time of solar noon, at the location of the observer."],["sprintf","Variant of \\c printf() that sends the formatted characters to string \\c s."],["sprintf_P","Variant of \\c sprintf() that uses a \\c fmt string that resides in program memory."],["sqrt","The sqrt() function returns the non-negative square root of \\a __x."],["sqrtf","An alias for sqrt()."],["square","The function square() returns __x * __x."],["srand","Pseudo-random number generator seeding; see rand()."],["srandom","\\ingroup avr_stdlib Pseudo-random number generator seeding; see random()."],["sscanf","The function \\c sscanf performs formatted input, reading the input data from the buffer pointed to by \\c buf."],["sscanf_P","Variant of sscanf() using a \\c fmt string in program memory."],["strcasecmp","\\ingroup avr_string \\fn int strcasecmp(const char *s1, const char *s2) \\brief Compare two strings ignoring case."],["strcasecmp_P","\\ingroup avr_pgmspace \\fn int strcasecmp_P(const char *s1, const char *s2) \\brief Compare two strings ignoring case."],["strcasecmp_PF","\\ingroup avr_pgmspace \\fn int strcasecmp_PF(const char *s1, uint_farptr_t s2) \\brief Compare two strings ignoring case"],["strcasestr","\\ingroup avr_string \\fn char *strcasestr(const char *s1, const char *s2)"],["strcasestr_P","\\ingroup avr_pgmspace \\fn char *strcasestr_P(const char *s1, const char *s2)"],["strcat","\\ingroup avr_string \\fn char *strcat(char *dest, const char *src) \\brief Concatenate two strings."],["strcat_P","\\ingroup avr_pgmspace \\fn char *strcat_P(char *dest, const char *src)"],["strcat_PF","\\ingroup avr_pgmspace \\fn char *strcat_PF(char *dst, uint_farptr_t src) \\brief Concatenates two strings"],["strchr","\\ingroup avr_string \\fn char *strchr(const char *src, int val) \\brief Locate character in string."],["strchr_P","\\ingroup avr_pgmspace \\fn const char *strchr_P(const char *s, int val) \\brief Locate character in program space string."],["strchrnul","\\ingroup avr_string \\fn char *strchrnul(const char *s, int c)"],["strchrnul_P","\\ingroup avr_pgmspace \\fn const char *strchrnul_P(const char *s, int c)"],["strcmp","\\ingroup avr_string \\fn int strcmp(const char *s1, const char *s2) \\brief Compare two strings."],["strcmp_P","\\ingroup avr_pgmspace \\fn int strcmp_P(const char *s1, const char *s2)"],["strcmp_PF","\\ingroup avr_pgmspace \\fn int strcmp_PF(const char *s1, uint_farptr_t s2) \\brief Compares two strings"],["strcoll",""],["strcpy","\\ingroup avr_string \\fn char *strcpy(char *dest, const char *src) \\brief Copy a string."],["strcpy_P","\\ingroup avr_pgmspace \\fn char *strcpy_P(char *dest, const char *src)"],["strcpy_PF","\\ingroup avr_pgmspace \\fn char *strcpy_PF(char *dst, uint_farptr_t src) \\brief Duplicate a string"],["strcspn","\\ingroup avr_string \\fn size_t strcspn(const char *s, const char *reject)"],["strcspn_P","\\ingroup avr_pgmspace \\fn size_t strcspn_P(const char *s, const char *reject)"],["strdup","\\ingroup avr_string \\fn char *strdup(const char *s1) \\brief Duplicate a string."],["strerror",""],["strftime","A complete description of strftime() is beyond the pale of this document. Refer to ISO/IEC document 9899 for details."],["strlcat","\\ingroup avr_string \\fn size_t strlcat(char *dst, const char *src, size_t siz) \\brief Concatenate two strings."],["strlcat_P","\\ingroup avr_pgmspace \\fn size_t strlcat_P(char *dst, const char *src, size_t siz) \\brief Concatenate two strings."],["strlcat_PF","\\ingroup avr_pgmspace \\fn size_t strlcat_PF(char *dst, uint_farptr_t src, size_t n) \\brief Concatenate two strings"],["strlcpy","\\ingroup avr_string \\fn size_t strlcpy(char *dst, const char *src, size_t siz) \\brief Copy a string."],["strlcpy_P","\\ingroup avr_pgmspace \\fn size_t strlcpy_P(char *dst, const char *src, size_t siz) \\brief Copy a string from progmem to RAM."],["strlcpy_PF","\\ingroup avr_pgmspace \\fn size_t strlcpy_PF(char *dst, uint_farptr_t src, size_t siz) \\brief Copy a string from progmem to RAM."],["strlen","\\ingroup avr_string \\fn size_t strlen(const char *src) \\brief Calculate the length of a string."],["strlen_PF","\\ingroup avr_pgmspace \\fn size_t strlen_PF(uint_farptr_t s) \\brief Obtain the length of a string"],["strlwr","\\ingroup avr_string \\fn char *strlwr(char *s) \\brief Convert a string to lower case."],["strncasecmp","\\ingroup avr_string \\fn int strncasecmp(const char *s1, const char *s2, size_t len) \\brief Compare two strings ignoring case."],["strncasecmp_P","\\ingroup avr_pgmspace \\fn int strncasecmp_P(const char *s1, const char *s2, size_t n) \\brief Compare two strings ignoring case."],["strncasecmp_PF","\\ingroup avr_pgmspace \\fn int strncasecmp_PF(const char *s1, uint_farptr_t s2, size_t n) \\brief Compare two strings ignoring case"],["strncat","\\ingroup avr_string \\fn char *strncat(char *dest, const char *src, size_t len) \\brief Concatenate two strings."],["strncat_P","\\ingroup avr_pgmspace \\fn char *strncat_P(char *dest, const char *src, size_t len) \\brief Concatenate two strings."],["strncat_PF","\\ingroup avr_pgmspace \\fn char *strncat_PF(char *dst, uint_farptr_t src, size_t n) \\brief Concatenate two strings"],["strncmp","\\ingroup avr_string \\fn int strncmp(const char *s1, const char *s2, size_t len) \\brief Compare two strings."],["strncmp_P","\\ingroup avr_pgmspace \\fn int strncmp_P(const char *s1, const char *s2, size_t n)"],["strncmp_PF","\\ingroup avr_pgmspace \\fn int strncmp_PF(const char *s1, uint_farptr_t s2, size_t n) \\brief Compare two strings with limited length"],["strncpy","\\ingroup avr_string \\fn char *strncpy(char *dest, const char *src, size_t len) \\brief Copy a string."],["strncpy_P","\\ingroup avr_pgmspace \\fn char *strncpy_P(char *dest, const char *src, size_t n)"],["strncpy_PF","\\ingroup avr_pgmspace \\fn char *strncpy_PF(char *dst, uint_farptr_t src, size_t n) \\brief Duplicate a string until a limited length"],["strnlen","\\ingroup avr_string \\fn size_t strnlen(const char *src, size_t len) \\brief Determine the length of a fixed-size string."],["strnlen_P","\\ingroup avr_pgmspace \\fn size_t strnlen_P(const char *src, size_t len) \\brief Determine the length of a fixed-size string."],["strnlen_PF","\\ingroup avr_pgmspace \\fn size_t strnlen_PF(uint_farptr_t s, size_t len) \\brief Determine the length of a fixed-size string"],["strpbrk","\\ingroup avr_string \\fn char *strpbrk(const char *s, const char *accept)"],["strpbrk_P","\\ingroup avr_pgmspace \\fn char *strpbrk_P(const char *s, const char *accept)"],["strrchr","\\ingroup avr_string \\fn char *strrchr(const char *src, int val) \\brief Locate character in string."],["strrchr_P","\\ingroup avr_pgmspace \\fn const char *strrchr_P(const char *s, int val) \\brief Locate character in string."],["strrev","\\ingroup avr_string \\fn char *strrev(char *s) \\brief Reverse a string."],["strsep","\\ingroup avr_string \\fn char *strsep(char **sp, const char *delim) \\brief Parse a string into tokens."],["strsep_P","\\ingroup avr_pgmspace \\fn char *strsep_P(char **sp, const char *delim) \\brief Parse a string into tokens."],["strspn","\\ingroup avr_string \\fn size_t strspn(const char *s, const char *accept)"],["strspn_P","\\ingroup avr_pgmspace \\fn size_t strspn_P(const char *s, const char *accept)"],["strstr","\\ingroup avr_string \\fn char *strstr(const char *s1, const char *s2) \\brief Locate a substring."],["strstr_P","\\ingroup avr_pgmspace \\fn char *strstr_P(const char *s1, const char *s2) \\brief Locate a substring."],["strstr_PF","\\ingroup avr_pgmspace \\fn char *strstr_PF(const char *s1, uint_farptr_t s2) \\brief Locate a substring."],["strtod",""],["strtok","\\ingroup avr_string \\fn char *strtok(char *s, const char *delim) \\brief Parses the string s into tokens."],["strtok_P","\\ingroup avr_pgmspace \\fn char *strtok_P(char *s, const char * delim) \\brief Parses the string into tokens."],["strtok_r","\\ingroup avr_string \\fn char *strtok_r(char *string, const char *delim, char **last) \\brief Parses string into tokens."],["strtok_rP","\\ingroup avr_pgmspace \\fn char *strtok_rP (char *string, const char *delim, char **last) \\brief Parses string into tokens."],["strtol","The strtol() function converts the string in \\c nptr to a long value.  The conversion is done according to the given base, which must be between 2 and 36 inclusive, or be the special value 0."],["strtoul","The strtoul() function converts the string in \\c nptr to an unsigned long value.  The conversion is done according to the given base, which must be between 2 and 36 inclusive, or be the special value 0."],["strupr","\\ingroup avr_string \\fn char *strupr(char *s) \\brief Convert a string to upper case."],["strxfrm",""],["sun_rise","Return the time of sunrise, at the location of the observer. See the note about daylight_seconds()."],["sun_set","Return the time of sunset, at the location of the observer. See the note about daylight_seconds()."],["system",""],["system_tick","Maintain the system time by calling this function at a rate of 1 Hertz."],["tan","The tan() function returns the tangent of \\a __x, measured in radians."],["tanh","The tanh() function returns the hyperbolic tangent of \\a __x."],["time","The time function returns the systems current time stamp. If timer is not a null pointer, the return value is also assigned to the object it points to."],["tmpfile",""],["tmpnam",""],["toascii","\\ingroup ctype"],["tolower","\\ingroup ctype"],["toupper","\\ingroup ctype"],["trunc","The trunc() function rounds \\a __x to the nearest integer not larger in absolute value."],["ungetc","The ungetc() function pushes the character \\c c (converted to an unsigned char) back onto the input stream pointed to by \\c stream. The pushed-back character will be returned by a subsequent read on the stream."],["usa_dst",""],["vfprintf","\\c vfprintf is the central facility of the \\c printf family of functions.  It outputs values to \\c stream under control of a format string passed in \\c fmt.  The actual values to print are passed as a variable argument list \\c ap."],["vfprintf_P","Variant of \\c vfprintf() that uses a \\c fmt string that resides in program memory."],["vfscanf",""],["vfscanf_P","Variant of vfscanf() using a \\c fmt string in program memory."],["vprintf","The function \\c vprintf performs formatted output to stream \\c stdout, taking a variable argument list as in vfprintf()."],["vscanf","The function \\c vscanf performs formatted input from stream \\c stdin, taking a variable argument list as in vfscanf()."],["vsnprintf","Like \\c vsprintf(), but instead of assuming \\c s to be of infinite size, no more than \\c n characters (including the trailing NUL character) will be converted to \\c s."],["vsnprintf_P","Variant of \\c vsnprintf() that uses a \\c fmt string that resides in program memory."],["vsprintf","Like \\c sprintf() but takes a variable argument list for the arguments."],["vsprintf_P","Variant of \\c vsprintf() that uses a \\c fmt string that resides in program memory."],["week_of_month","Return the calendar week of month, where the first week is considered to begin on the day of week specified by 'start'. The returned value may range from zero to 5."],["week_of_year","Return the calendar week of year, where week 1 is considered to begin on the day of week specified by 'start'. The returned value may range from zero to 52."],["write",""]],"static":[["_CLOCKS_PER_SEC_",""],["__iob",""],["__malloc_heap_end",""],["__malloc_heap_start",""],["__malloc_margin",""],["__signature",""],["errno",""],["sig_atomic_t",""]],"struct":[["__file",""],["__fuse_t",""],["_jmp_buf",""],["div_t","Result type for function div()."],["lconv",""],["ldiv_t","Result type for function ldiv()."],["max_align_t",""],["tm","The tm structure contains a representation of time 'broken down' into components of the Gregorian calendar."],["week_date","Structure which represents a date as a year, week number of that year, and day of week. See http://en.wikipedia.org/wiki/ISO_week_date for more information."]],"type":[["FILE","\\c FILE is the opaque structure that is passed around between the various standard IO functions."],["_MONTHS_","Enumerated labels for the months."],["_WEEK_DAYS_","Enumerated labels for the days of the week."],["__builtin_va_list",""],["__compar_fn_t","Comparision function type for qsort(), just for convenience."],["__gnuc_va_list",""],["clock_div_t",""],["clock_t",""],["fpos_t",""],["int_farptr_t","\\ingroup avr_inttypes signed integer type that can hold a pointer > 64 KB"],["int_fast16_t","\\ingroup avr_stdint fastest signed int with at least 16 bits."],["int_fast32_t","\\ingroup avr_stdint fastest signed int with at least 32 bits."],["int_fast64_t","\\ingroup avr_stdint fastest signed int with at least 64 bits. \\note This type is not available when the compiler option -mint8 is in effect."],["int_fast8_t","\\ingroup avr_stdint fastest signed int with at least 8 bits."],["int_least16_t","\\ingroup avr_stdint signed int with at least 16 bits."],["int_least32_t","\\ingroup avr_stdint signed int with at least 32 bits."],["int_least64_t","\\ingroup avr_stdint signed int with at least 64 bits. \\note This type is not available when the compiler option -mint8 is in effect."],["int_least8_t","\\ingroup avr_stdint signed int with at least 8 bits."],["intmax_t","\\ingroup avr_stdint largest signed int available."],["jmp_buf",""],["off_t",""],["sighandler_t",""],["sigset_t",""],["size_t",""],["time_t","time_t represents seconds elapsed from Midnight, Jan 1 2000 UTC (the Y2K 'epoch'). Its range allows this implementation to represent time up to Tue Feb 7 06:28:15 2136 UTC."],["uint_farptr_t","\\ingroup avr_inttypes unsigned integer type that can hold a pointer > 64 KB"],["uint_fast16_t","\\ingroup avr_stdint fastest unsigned int with at least 16 bits."],["uint_fast32_t","\\ingroup avr_stdint fastest unsigned int with at least 32 bits."],["uint_fast64_t","\\ingroup avr_stdint fastest unsigned int with at least 64 bits. \\note This type is not available when the compiler option -mint8 is in effect."],["uint_fast8_t","\\ingroup avr_stdint fastest unsigned int with at least 8 bits."],["uint_least16_t","\\ingroup avr_stdint unsigned int with at least 16 bits."],["uint_least32_t","\\ingroup avr_stdint unsigned int with at least 32 bits."],["uint_least64_t","\\ingroup avr_stdint unsigned int with at least 64 bits. \\note This type is not available when the compiler option -mint8 is in effect."],["uint_least8_t","\\ingroup avr_stdint unsigned int with at least 8 bits."],["uintmax_t","\\ingroup avr_stdint largest unsigned int available."],["va_list",""],["wchar_t",""]]});